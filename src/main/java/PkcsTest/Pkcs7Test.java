package PkcsTest;

import cn.com.mcsca.bouncycastle.util.encoders.Base64;
import cn.com.mcsca.itextpdf.text.pdf.security.BouncyCastleDigest;
import cn.com.mcsca.itextpdf.text.pdf.security.DigestAlgorithms;
import cn.hutool.core.io.FileUtil;
import lombok.SneakyThrows;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1InputStream;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1Set;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.util.encoders.Hex;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayInputStream;
import java.security.MessageDigest;
import java.security.Security;
import java.security.Signature;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;

/**
 * @author TangHaoKai
 * @version V1.0 2024/1/5 18:29
 **/
public class Pkcs7Test {

    @SneakyThrows
    public static void main(String[] args) {
        Security.addProvider(new BouncyCastleProvider());
        // bjca的signdata
        // String hex
        // long[] longs = new long[]{0, 122174, 151076, 4745};
        // byte[] pdfBytes = FileUtil.readBytes("C:\\Users\\ggk911\\Desktop\\个人信息授权书(2).pdf");

        // 通过annot自建的
        String hex = "308209c606092a864886f70d010702a08209b7308209b3020101310e300c06082a811ccf550183110500300b06092a864886f70d010701a082029c308202983082023fa003020102020103300a06082a811ccf550183753058310b300906035504061302434e310e300c060355040a0c054368696e6131153013060355040b0c0c496e7465726d6564696174653122302006092a864886f70d01090116133133393833303533343535403136332e636f6d301e170d3234303130323039303935315a170d3235303130313039303935315a3066310b300906035504061302434e310e300c060355040a0c054368696e613112301006035504070c0943686f6e6771696e67310f300d06035504030c0647474b3931313122302006092a864886f70d01090116133133393833303533343535403136332e636f6d3059301306072a8648ce3d020106082a811ccf5501822d034200048d9c45d3af5c6fc9e8821728ef24c0a2b55474509eb75337d4e1fb68180d1e8ecdcf9ff08b6ad088ccb7f08f38a68aa19fee31bc5317ce11d0d8f101252e4a9ea381eb3081e8301d0603551d0e041604149344fed3eb60002b17418d0e4c0e922f43e79a0c301f0603551d230418301680148a9d5fb6b9adff896bc777ca4dc7cd304509896230090603551d1f04023000305f06082b060105050701010101ff0450304e302806082b06010505073001821c687474703a2f2f3132372e302e302e312f636169737375652e68746d302206082b060105050730028216687474703a2f2f3132372e302e302e313a3230343433300e0603551d0f0101ff0404030206c030120603551d130101ff040830060101ff02010330160603551d250101ff040c300a06082b06010505070308300a06082a811ccf5501837503470030440220623263fcd18d876e578e94e8066124a98c036d0bcadbf15c50ebf163bb6b6227022002375437be349908301fa6d36280f0f68ca0646f1155ca67ad761458854db7ae318206ef308206eb020101305d3058310b300906035504061302434e310e300c060355040a0c054368696e6131153013060355040b0c0c496e7465726d6564696174653122302006092a864886f70d01090116133133393833303533343535403136332e636f6d020103300c06082a811ccf550183110500a069301806092a864886f70d010903310b06092a864886f70d010701301c06092a864886f70d010905310f170d3234303131383036333232375a302f06092a864886f70d0109043122042045e94c51928ec46f3cbac22a954ceb1a9a60497aa8cae9cb93fc8ca08f5744a1300c06082a811ccf5501822d050004483046022100dff3d8571e40bb1863595cd3cb4351738da897e65cc1fe85d104f762d0569a46022100cabeee83bbe913b29443cd2886069d58ecab3b57dd844ee0264fd37f2b4a06d4a18205b4308205b0060b2a864886f70d010910020e3182059f3082059b06092a864886f70d010702a082058c30820588020103310e300c06082a811ccf5501831105003078060b2a864886f70d0109100104a0690467306502010106082b060105050703083031300d0609608648016503040201050004204beba39d00e522dcc7612beb71706728cf6ed4efb6105e39d025363f835ac04f020a685bc047064921c5eec3180f32303234303131383036333232385a0206018d1b456143a082033b30820337308202dda003020102020a685bc047064921c5eec3300a06082a811ccf550183753061310b300906035504061302434e31363034060355040a0c2d4469676974616c20436572746966696361746520417574686f726974792043656e74657220436f2e2c204c7464311a301806035504030c11476c6f62616c2054534120534d32204341301e170d3233313232353033323431355a170d3238313232333033323431355a3063310b300906035504061302434e31363034060355040a0c2d4469676974616c20436572746966696361746520417574686f726974792043656e74657220436f2e2c204c7464311c301a06035504030c13476c6f62616c2054534120534d32205369676e3059301306072a8648ce3d020106082a811ccf5501822d034200041f65a3c6aaf46a6b371a82467a5fe8cb1c2045ed25f39072697aa9eabf15a19dca61ed6ab2aea53a4c329687eb7c9b4e4c0d16344b963c2f346b9a5610dc66b6a382017930820175300e0603551d0f0101ff040403020186300c0603551d130101ff04023000301f0603551d23041830168014347ffd7095fc658368c72a73b709eb6b2c3d0fad301d0603551d0e04160414b61b6f1bd7a4c59693d655396858c8c1ed458f0930160603551d250101ff040c300a06082b06010505070308303f0603551d1f043830363034a032a030862e687474703a2f2f312e31322e36372e3132363a383038312f63726c2f476c6f62616c545341534d3243412e63726c307e06082b0601050507010104723070303206082b060105050730018626687474703a2f2f312e31322e36372e3132363a383038322f6f6373702f6f6373705175657279303a06082b06010505073002862e687474703a2f2f312e31322e36372e3132363a383038312f6372742f476c6f62616c545341534d3243412e637274303c0603551d2004353033303106096086480186fd6c01053024302206082b060105050702011616687474703a2f2f312e31322e36372e3132362f637073300a06082a811ccf55018375034800304502207fd007b8f3c92cf75b00fcf7ce45b0fa22d5fe34e1fc6fbb1a528f4470a4b6d502210082443b2d3f073a30c58bb9961d709ea43ba9d07149afb93198e0946823f6d004318201b8308201b4020101306f3061310b300906035504061302434e31363034060355040a0c2d4469676974616c20436572746966696361746520417574686f726974792043656e74657220436f2e2c204c7464311a301806035504030c11476c6f62616c2054534120534d32204341020a685bc047064921c5eec3300c06082a811ccf550183110500a081db301a06092a864886f70d010903310d060b2a864886f70d0109100104301c06092a864886f70d010905310f170d3234303131383036333232385a302906092a864886f70d010934311c301a300c06082a811ccf550183110500a10a06082a811ccf55018375302f06092a864886f70d010904312204209cb42b07f77ddc9f8b299fb361b7ead666a1ab68971904fd798b0fc4fa90d2d83043060b2a864886f70d010910022f313430323030302e300a06082a811ccf55018311042052ff89a05242281be01dd06a2cefcb193c2a512281479d3c320452992bf8037f300a06082a811ccf5501837504463044022033850345d64c31bcdfc056f362dce608277babe6ab48115c30b0e3bf4aff0c3802203c4e4d717f23e4bd58e1c62dce4d9c383bf4e8fd9a525fe40673b41d9790bd78";
        // hex = "";
        long[] longs = new long[]{0, 52133, 68519, 1948};
        byte[] pdfBytes = FileUtil.readBytes("D:\\desktopD\\富民银行2024.6.12\\何金龙\\额度合同(何金龙).pdf");

        ASN1InputStream asn1InputStream = new ASN1InputStream(Hex.decode(hex));
        //将hex转换为byte输出
        ASN1Primitive asn1Primitive;
        while ((asn1Primitive = asn1InputStream.readObject()) != null) {
            ASN1Sequence sequence = (ASN1Sequence) asn1Primitive;
            ASN1TaggedObject taggedObject = (ASN1TaggedObject) sequence.getObjectAt(1);
            ASN1Sequence sequence1 = (ASN1Sequence) taggedObject.getBaseObject();

            // 证书
            ASN1TaggedObject taggedObject1 = (ASN1TaggedObject) sequence1.getObjectAt(3);
            ASN1Sequence cert = (ASN1Sequence) taggedObject1.getBaseObject();
            System.out.println("证书>> " + Hex.toHexString(cert.getEncoded()));

            // 属性Attr
            ASN1Set signInfos = (ASN1Set) sequence1.getObjectAt(4);
            ASN1Sequence signInfo = (ASN1Sequence) signInfos.getObjectAt(0);
            ASN1TaggedObject signAttr = (ASN1TaggedObject) signInfo.getObjectAt(3);
            ASN1Set signAttr2 = ASN1Set.getInstance(signAttr, false);
            System.out.println("属性Attr>> " + Hex.toHexString(signAttr2.getEncoded()));

            // 原文range摘要
            ASN1Sequence signAttrSequence = (ASN1Sequence) signAttr.getBaseObject();
            ASN1Sequence signAttrSequenceSeq = (ASN1Sequence) signAttrSequence.getObjectAt(2);
            ASN1Set digestSet = (ASN1Set) signAttrSequenceSeq.getObjectAt(1);
            ASN1OctetString digest = (ASN1OctetString) digestSet.getObjectAt(0);
            System.out.println("原文range摘要>> " + Hex.toHexString(digest.getOctets()));

            // 签名值(属性Attr)
            ASN1OctetString signValueOcStr = (ASN1OctetString) signInfo.getObjectAt(5);
            ASN1Sequence signValue = (ASN1Sequence) new ASN1InputStream(signValueOcStr.getOctets()).readObject();
            System.out.println("签名值（属性Attr）>> " + Hex.toHexString(signValue.toASN1Primitive().getEncoded()));
            // SM3
            MessageDigest sm3 = new BouncyCastleDigest().getMessageDigest("SM3");
            sm3.update(signValue.toASN1Primitive().getEncoded());
            byte[] digest2 = sm3.digest();
            System.out.println("SM3(签名值)>> " + Hex.toHexString(digest2));

            // 时间戳
            ASN1TaggedObject timeStampTag = (ASN1TaggedObject) signInfo.getObjectAt(6);
            ASN1Sequence timeStampSequence = (ASN1Sequence) timeStampTag.getBaseObject();
            ASN1Set timeStampSet = (ASN1Set) timeStampSequence.getObjectAt(1);
            ASN1Sequence timeStampSequence2 = (ASN1Sequence) timeStampSet.getObjectAt(0);
            System.out.println("时间戳>> " + Hex.toHexString(timeStampSequence2.getEncoded()));

            ASN1TaggedObject timeStampTag2 = (ASN1TaggedObject) timeStampSequence2.getObjectAt(1);
            ASN1Sequence timeStampSequence3 = (ASN1Sequence) timeStampTag2.getBaseObject();


            // encapContentInfo eContent
            ASN1Sequence eContentSequence = (ASN1Sequence) timeStampSequence3.getObjectAt(2);
            ASN1TaggedObject eContentTag = (ASN1TaggedObject) eContentSequence.getObjectAt(1);
            ASN1OctetString eContent = (ASN1OctetString) eContentTag.getBaseObject();
            System.out.println("eContent>> " + Hex.toHexString(eContent.getOctets()));

            // eContentSM3
            sm3.reset();
            sm3.update(eContent.getOctets());
            System.out.println("econtent摘要>> " + Hex.toHexString(sm3.digest()));

            // 时间戳证书
            ASN1TaggedObject timeStampTag3 = (ASN1TaggedObject) timeStampSequence3.getObjectAt(3);
            ASN1Sequence timeCert = (ASN1Sequence) timeStampTag3.getBaseObject();
            System.out.println("时间戳证书>> " + Hex.toHexString(timeCert.getEncoded()));

            // 时间戳证书哈希
            sm3.reset();
            sm3.update(timeCert.getEncoded());
            System.out.println("时间戳证书哈希>> " + Hex.toHexString(sm3.digest()));

            ASN1Set timeStampAttrSet = (ASN1Set) timeStampSequence3.getObjectAt(4);
            ASN1Sequence timeStampAttrSequence = (ASN1Sequence) timeStampAttrSet.getObjectAt(0);

            // 时间戳属性
            ASN1TaggedObject timeStampAttrTag = (ASN1TaggedObject) timeStampAttrSequence.getObjectAt(3);
            ASN1Set timeStampAttr = ASN1Set.getInstance(timeStampAttrTag, false);
            System.out.println("时间戳属性>> " + Hex.toHexString(timeStampAttr.getEncoded()));

            // 时间戳原文摘要
            // 时间戳属性中的原文摘要位置不一样 2/3
            // ASN1Sequence timeStampAttrOriHashSeq = (ASN1Sequence) timeStampAttr.getObjectAt(2);
            ASN1Sequence timeStampAttrOriHashSeq = (ASN1Sequence) timeStampAttr.getObjectAt(3);
            ASN1Set timeStampAttrOriHashSet = (ASN1Set) timeStampAttrOriHashSeq.getObjectAt(1);
            ASN1OctetString timeStampAttrOriHash = (ASN1OctetString) timeStampAttrOriHashSet.getObjectAt(0);
            System.out.println("时间戳原文摘要>> " + Hex.toHexString(timeStampAttrOriHash.getOctets()));

            // 时间戳签名值(时间戳属性)
            ASN1OctetString timeStampSignValueOcStr = (ASN1OctetString) timeStampAttrSequence.getObjectAt(5);
            ASN1Sequence timeStampSignValue = (ASN1Sequence) new ASN1InputStream(timeStampSignValueOcStr.getOctets()).readObject();
            System.out.println("时间戳签名值>> " + Hex.toHexString(timeStampSignValue.getEncoded()));

            // 验属性签名值
            String publicCertSm2 = "MIICmDCCAj+gAwIBAgIBAzAKBggqgRzPVQGDdTBYMQswCQYDVQQGEwJDTjEOMAwGA1UECgwFQ2hpbmExFTATBgNVBAsMDEludGVybWVkaWF0ZTEiMCAGCSqGSIb3DQEJARYTMTM5ODMwNTM0NTVAMTYzLmNvbTAeFw0yNDAxMDIwOTA5NTFaFw0yNTAxMDEwOTA5NTFaMGYxCzAJBgNVBAYTAkNOMQ4wDAYDVQQKDAVDaGluYTESMBAGA1UEBwwJQ2hvbmdxaW5nMQ8wDQYDVQQDDAZHR0s5MTExIjAgBgkqhkiG9w0BCQEWEzEzOTgzMDUzNDU1QDE2My5jb20wWTATBgcqhkjOPQIBBggqgRzPVQGCLQNCAASNnEXTr1xvyeiCFyjvJMCitVR0UJ63UzfU4ftoGA0ejs3Pn/CLatCIzLfwjzimiqGf7jG8UxfOEdDY8QElLkqeo4HrMIHoMB0GA1UdDgQWBBSTRP7T62AAKxdBjQ5MDpIvQ+eaDDAfBgNVHSMEGDAWgBSKnV+2ua3/iWvHd8pNx80wRQmJYjAJBgNVHR8EAjAAMF8GCCsGAQUFBwEBAQH/BFAwTjAoBggrBgEFBQcwAYIcaHR0cDovLzEyNy4wLjAuMS9jYWlzc3VlLmh0bTAiBggrBgEFBQcwAoIWaHR0cDovLzEyNy4wLjAuMToyMDQ0MzAOBgNVHQ8BAf8EBAMCBsAwEgYDVR0TAQH/BAgwBgEB/wIBAzAWBgNVHSUBAf8EDDAKBggrBgEFBQcDCDAKBggqgRzPVQGDdQNHADBEAiBiMmP80Y2HbleOlOgGYSSpjANtC8rb8VxQ6/Fju2tiJwIgAjdUN740mQgwH6bTYoDw9oygZG8RVcpnrXYUWIVNt64=";
            ByteArrayInputStream bis = new ByteArrayInputStream(Base64.decode(publicCertSm2));
            CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509", "BC");
            Certificate[] certificateChain = new Certificate[1];
            certificateChain[0] = certificateFactory.generateCertificate(bis);

            Signature signature = Signature.getInstance("SM3withSM2", "BC");
            // CertificateFactory fact = CertificateFactory.getInstance("X.509", "BC");
            // X509Certificate cert3 = (X509Certificate) fact.generateCertificate(new ByteArrayInputStream(cert.getEncoded()));
            // signature.initVerify(cert3.getPublicKey());
            signature.initVerify(certificateChain[0].getPublicKey());
            // signature.update(signAttr2.getEncoded());
            System.out.println("signAttr2>> "+Hex.toHexString(signAttr2.getEncoded()));
            signature.update(Hex.decode("3169301806092a864886f70d010903310b06092a864886f70d010701301c06092a864886f70d010905310f170d3234303131363033333933395a302f06092a864886f70d010904312204201dfb90c25fc18f8291f5bb86b520886bc6589e0b3f3d38f74a6d49651eea934d"));
            // boolean verify = signature.verify(signValue.toASN1Primitive().getEncoded());
            System.out.println("signValue>> "+Hex.toHexString(signValue.toASN1Primitive().getEncoded()));
            boolean verify = signature.verify(Hex.decode("3046022100bc7c9c860e3cd52b21f2d88919d41aff0f47fb0029e8dfd7e53999fc95b814e4022100f3c72ddd2b10d3bebbf69e61a6dabd756aece1b6b3baed98cceca7d317622fba"));
            System.out.println("验签名值>> " + verify);



            // pdf
            MessageDigest messageDigest = DigestAlgorithms.getMessageDigest("SM3", "BC");

            // 签名原文
            byte[] updateData = new byte[(int) (longs[1] + longs[3])];
            System.arraycopy(pdfBytes, 0, updateData, 0, (int) longs[1]);
            System.arraycopy(pdfBytes, (int) longs[2], updateData, (int) longs[1], (int) longs[3]);
            FileUtil.writeBytes(updateData, "C:\\Users\\ggk911\\Desktop\\个人信息授权书range");
            ByteArrayInputStream input = new ByteArrayInputStream(updateData);
            byte[] buf = new byte[8192];
            int rd;
            while ((rd = input.read(buf, 0, buf.length)) > 0) {
                messageDigest.update(buf, 0, rd);
            }

            // 原文HASH
            byte[] digest1 = messageDigest.digest();
            System.out.println("原文哈希" + Hex.toHexString(digest1));

            // 原文哈希 equals 原文range摘要
            System.out.println("原文哈希 equals 原文range摘要" + Hex.toHexString(digest1).equals(Hex.toHexString(digest.getOctets())));

            // 验时间戳签名值
            Signature signature2 = Signature.getInstance("SM3withSM2", "BC");
            CertificateFactory fact2 = CertificateFactory.getInstance("X.509", "BC");
            X509Certificate cert4 = (X509Certificate) fact2.generateCertificate(new ByteArrayInputStream(timeCert.getEncoded()));
            signature2.initVerify(cert4.getPublicKey());
            signature2.update(timeStampAttr.getEncoded());
            boolean verify2 = signature2.verify(timeStampSignValue.getEncoded());
            System.out.println("验时间戳签名值" + verify2);


        }
    }

    @Test
    @SneakyThrows
    public void cfca() {
        Security.addProvider(new BouncyCastleProvider());
        // cfca
        String hex = "3082046a060a2a811ccf550601040202a082045a30820456020101310e300c06082a811ccf550183110500300c060a2a811ccf550601040201a082035930820355308202f8a00302010202083300000437455398300c06082a811ccf550183750500305c310b300906035504061302434e3130302e060355040a0c274368696e612046696e616e6369616c2043657274696669636174696f6e20417574686f72697479311b301906035504030c12434643412041435320534d32204f43413333301e170d3232303631363130323735315a170d3237303631363130323735315a308184310b300906035504061302434e31173015060355040a0c0e4346434120414353204f434133313110300e060355040b0c07534353444e504f31153013060355040b0c0c496e646976696475616c2d313133303106035504030c2a30353140e99988e4bd99e6b3a240303531303530323139373830393330313731364036373030303030313059301306072a8648ce3d020106082a811ccf5501822d034200044451846de843f2d8aed14d0bb57fe21045357b1aaa3e9ac1af35b9682f1ca589b0636b60451c6c3e74181ea73231b317a60a04a885697f4af5cd6a37b858d093a382017730820173306c06082b060105050701010460305e302806082b06010505073001861c687474703a2f2f6f6373702e636663612e636f6d2e636e2f6f637370303206082b060105050730028626687474703a2f2f63726c2e636663612e636f6d2e636e2f6f636133332f6f636133332e636572301f0603551d2304183016801411d028219ef47259fe6408e99ddba469841271bc300c0603551d130101ff0402300030480603551d200441303f303d060860811c86ef2a01043031302f06082b060105050702011623687474703a2f2f7777772e636663612e636f6d2e636e2f75732f75732d31342e68746d303c0603551d1f043530333031a02fa02d862b687474703a2f2f63726c2e636663612e636f6d2e636e2f6f636133332f534d322f63726c3334302e63726c300e0603551d0f0101ff0404030206c0301d0603551d0e041604146663d0fe2f943dfcb869e2e91f1d1d973a0a019e301d0603551d250416301406082b0601050507030206082b06010505070304300c06082a811ccf5501837505000349003046022100d1afc714fe321021919912b2147ed1af7d32c468b4a7f2233c5048a3e6318b3d0221009e1df719825a4906b8b7ea626f37d593900ac3b9c7672aff0dbb68373d00b8913181d53081d20201013068305c310b300906035504061302434e3130302e060355040a0c274368696e612046696e616e6369616c2043657274696669636174696f6e20417574686f72697479311b301906035504030c12434643412041435320534d32204f4341333302083300000437455398300c06082a811ccf550183110500300d06092a811ccf5501822d010500044630440220456d7f2b3ebcaf230e6398c6e104b4c47fc921d63c97184c263a0c4474d964d20220726330728743ca5e9d2ced638406634194599254c9c765fe824edffc192bdb60";
        long[] longs = new long[]{0, 123104, 139490, 6817};
        byte[] pdfBytes = FileUtil.readBytes("C:\\Users\\ggk911\\Desktop\\cfca.pdf");

        ASN1InputStream asn1InputStream = new ASN1InputStream(Hex.decode(hex));
        //将hex转换为byte输出
        ASN1Primitive asn1Primitive;
        while ((asn1Primitive = asn1InputStream.readObject()) != null) {
            ASN1Sequence sequence = (ASN1Sequence) asn1Primitive;
            ASN1TaggedObject taggedObject = (ASN1TaggedObject) sequence.getObjectAt(1);
            ASN1Sequence sequence1 = (ASN1Sequence) taggedObject.getBaseObject();

            // 证书
            ASN1TaggedObject taggedObject1 = (ASN1TaggedObject) sequence1.getObjectAt(3);
            ASN1Sequence cert = (ASN1Sequence) taggedObject1.getBaseObject();
            System.out.println("证书" + Hex.toHexString(cert.getEncoded()));

            // 属性Attr
            ASN1Set signInfos = (ASN1Set) sequence1.getObjectAt(4);
            ASN1Sequence signInfo = (ASN1Sequence) signInfos.getObjectAt(0);
            // cfca的类型不一样
            ASN1Sequence signAttr = (ASN1Sequence) signInfo.getObjectAt(3);
            System.out.println("属性Attr" + Hex.toHexString(signAttr.getEncoded()));


            // cfca直接没有
            // 原文range摘要
            // ASN1Sequence signAttrSequence = (ASN1Sequence) signAttr.getBaseObject();
            // ASN1Sequence signAttrSequenceSeq = (ASN1Sequence) signAttrSequence.getObjectAt(2);
            // ASN1Set digestSet = (ASN1Set) signAttrSequenceSeq.getObjectAt(1);
            // ASN1OctetString digest = (ASN1OctetString) digestSet.getObjectAt(0);
            // System.out.println("原文range摘要" + Hex.toHexString(digest.getOctets()));

            // 签名值(属性Attr)
            ASN1OctetString signValueOcStr = (ASN1OctetString) signInfo.getObjectAt(4);
            ASN1Sequence signValue = (ASN1Sequence) new ASN1InputStream(signValueOcStr.getOctets()).readObject();
            System.out.println("签名值（属性Attr）" + Hex.toHexString(signValue.toASN1Primitive().getEncoded()));
            // SM3
            MessageDigest sm3 = new BouncyCastleDigest().getMessageDigest("SM3");
            sm3.update(signValue.toASN1Primitive().getEncoded());
            byte[] digest2 = sm3.digest();
            System.out.println("SM3(签名值)" + Hex.toHexString(digest2));

            // 时间戳
            // ASN1TaggedObject timeStampTag = (ASN1TaggedObject) signInfo.getObjectAt(6);
            // ASN1Sequence timeStampSequence = (ASN1Sequence) timeStampTag.getBaseObject();
            // ASN1Set timeStampSet = (ASN1Set) timeStampSequence.getObjectAt(1);
            // ASN1Sequence timeStampSequence2 = (ASN1Sequence) timeStampSet.getObjectAt(0);
            // System.out.println("时间戳" + Hex.toHexString(timeStampSequence2.getEncoded()));
            //
            // ASN1TaggedObject timeStampTag2 = (ASN1TaggedObject) timeStampSequence2.getObjectAt(1);
            // ASN1Sequence timeStampSequence3 = (ASN1Sequence) timeStampTag2.getBaseObject();
            //
            //
            // encapContentInfo eContent
            // ASN1Sequence eContentSequence = (ASN1Sequence) timeStampSequence3.getObjectAt(2);
            // ASN1TaggedObject eContentTag = (ASN1TaggedObject) eContentSequence.getObjectAt(1);
            // ASN1OctetString eContent = (ASN1OctetString) eContentTag.getBaseObject();
            // System.out.println("eContent:" + Hex.toHexString(eContent.getOctets()));
            //
            // // eContentSM3
            // sm3.reset();
            // sm3.update(eContent.getOctets());
            // System.out.println("econtent摘要:" + Hex.toHexString(sm3.digest()));
            //
            // // 时间戳证书
            // ASN1TaggedObject timeStampTag3 = (ASN1TaggedObject) timeStampSequence3.getObjectAt(3);
            // ASN1Sequence timeCert = (ASN1Sequence) timeStampTag3.getBaseObject();
            // System.out.println("时间戳证书" + Hex.toHexString(timeCert.getEncoded()));
            //
            // // 时间戳证书哈希
            // sm3.reset();
            // sm3.update(timeCert.getEncoded());
            // System.out.println("时间戳证书哈希" + Hex.toHexString(sm3.digest()));
            //
            // ASN1Set timeStampAttrSet = (ASN1Set) timeStampSequence3.getObjectAt(4);
            // ASN1Sequence timeStampAttrSequence = (ASN1Sequence) timeStampAttrSet.getObjectAt(0);
            //
            // // 时间戳属性
            // ASN1TaggedObject timeStampAttrTag = (ASN1TaggedObject) timeStampAttrSequence.getObjectAt(3);
            // ASN1Set timeStampAttr = ASN1Set.getInstance(timeStampAttrTag, false);
            // System.out.println("时间戳属性" + Hex.toHexString(timeStampAttr.getEncoded()));
            //
            // // 时间戳原文摘要
            // // 时间戳属性中的原文摘要位置不一样 2/3
            // // ASN1Sequence timeStampAttrOriHashSeq = (ASN1Sequence) timeStampAttr.getObjectAt(2);
            // ASN1Sequence timeStampAttrOriHashSeq = (ASN1Sequence) timeStampAttr.getObjectAt(3);
            // ASN1Set timeStampAttrOriHashSet = (ASN1Set) timeStampAttrOriHashSeq.getObjectAt(1);
            // ASN1OctetString timeStampAttrOriHash = (ASN1OctetString) timeStampAttrOriHashSet.getObjectAt(0);
            // System.out.println("时间戳原文摘要" + Hex.toHexString(timeStampAttrOriHash.getOctets()));
            //
            // // 时间戳签名值(时间戳属性)
            // ASN1OctetString timeStampSignValueOcStr = (ASN1OctetString) timeStampAttrSequence.getObjectAt(5);
            // ASN1Sequence timeStampSignValue = (ASN1Sequence) new ASN1InputStream(timeStampSignValueOcStr.getOctets()).readObject();
            // System.out.println("时间戳签名值" + Hex.toHexString(timeStampSignValue.getEncoded()));

            // 验属性签名值
            String publicCertSm2 = "MIICmDCCAj+gAwIBAgIBAzAKBggqgRzPVQGDdTBYMQswCQYDVQQGEwJDTjEOMAwGA1UECgwFQ2hpbmExFTATBgNVBAsMDEludGVybWVkaWF0ZTEiMCAGCSqGSIb3DQEJARYTMTM5ODMwNTM0NTVAMTYzLmNvbTAeFw0yNDAxMDIwOTA5NTFaFw0yNTAxMDEwOTA5NTFaMGYxCzAJBgNVBAYTAkNOMQ4wDAYDVQQKDAVDaGluYTESMBAGA1UEBwwJQ2hvbmdxaW5nMQ8wDQYDVQQDDAZHR0s5MTExIjAgBgkqhkiG9w0BCQEWEzEzOTgzMDUzNDU1QDE2My5jb20wWTATBgcqhkjOPQIBBggqgRzPVQGCLQNCAASNnEXTr1xvyeiCFyjvJMCitVR0UJ63UzfU4ftoGA0ejs3Pn/CLatCIzLfwjzimiqGf7jG8UxfOEdDY8QElLkqeo4HrMIHoMB0GA1UdDgQWBBSTRP7T62AAKxdBjQ5MDpIvQ+eaDDAfBgNVHSMEGDAWgBSKnV+2ua3/iWvHd8pNx80wRQmJYjAJBgNVHR8EAjAAMF8GCCsGAQUFBwEBAQH/BFAwTjAoBggrBgEFBQcwAYIcaHR0cDovLzEyNy4wLjAuMS9jYWlzc3VlLmh0bTAiBggrBgEFBQcwAoIWaHR0cDovLzEyNy4wLjAuMToyMDQ0MzAOBgNVHQ8BAf8EBAMCBsAwEgYDVR0TAQH/BAgwBgEB/wIBAzAWBgNVHSUBAf8EDDAKBggrBgEFBQcDCDAKBggqgRzPVQGDdQNHADBEAiBiMmP80Y2HbleOlOgGYSSpjANtC8rb8VxQ6/Fju2tiJwIgAjdUN740mQgwH6bTYoDw9oygZG8RVcpnrXYUWIVNt64=";
            ByteArrayInputStream bis = new ByteArrayInputStream(Base64.decode(publicCertSm2));
            CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509", "BC");
            Certificate[] certificateChain = new Certificate[1];
            certificateChain[0] = certificateFactory.generateCertificate(bis);

            Signature signature = Signature.getInstance("SM3withSM2", "BC");
            // CertificateFactory fact = CertificateFactory.getInstance("X.509", "BC");
            // X509Certificate cert3 = (X509Certificate) fact.generateCertificate(new ByteArrayInputStream(cert.getEncoded()));
            // signature.initVerify(cert3.getPublicKey());
            signature.initVerify(certificateChain[0].getPublicKey());
            // signature.update(signAttr2.getEncoded());
            // System.out.println("signAttr2"+Hex.toHexString(signAttr2.getEncoded()));
            signature.update(Hex.decode("3169301806092a864886f70d010903310b06092a864886f70d010701301c06092a864886f70d010905310f170d3234303131363033333933395a302f06092a864886f70d010904312204201dfb90c25fc18f8291f5bb86b520886bc6589e0b3f3d38f74a6d49651eea934d"));
            // boolean verify = signature.verify(signValue.toASN1Primitive().getEncoded());
            System.out.println("signValue"+Hex.toHexString(signValue.toASN1Primitive().getEncoded()));
            boolean verify = signature.verify(Hex.decode("3046022100bc7c9c860e3cd52b21f2d88919d41aff0f47fb0029e8dfd7e53999fc95b814e4022100f3c72ddd2b10d3bebbf69e61a6dabd756aece1b6b3baed98cceca7d317622fba"));
            System.out.println("验签名值" + verify);

            // pdf
            MessageDigest messageDigest = DigestAlgorithms.getMessageDigest("SM3", "BC");

            // 签名原文
            byte[] updateData = new byte[(int) (longs[1] + longs[3])];
            System.arraycopy(pdfBytes, 0, updateData, 0, (int) longs[1]);
            System.arraycopy(pdfBytes, (int) longs[2], updateData, (int) longs[1], (int) longs[3]);
            FileUtil.writeBytes(updateData, "C:\\Users\\ggk911\\Desktop\\个人信息授权书range");
            ByteArrayInputStream input = new ByteArrayInputStream(updateData);
            byte[] buf = new byte[8192];
            int rd;
            while ((rd = input.read(buf, 0, buf.length)) > 0) {
                messageDigest.update(buf, 0, rd);
            }

            // 原文HASH
            byte[] digest1 = messageDigest.digest();
            System.out.println("原文哈希" + Hex.toHexString(digest1));

            // 原文哈希 equals 原文range摘要
            // System.out.println("原文哈希 equals 原文range摘要" + Hex.toHexString(digest1).equals(Hex.toHexString(digest.getOctets())));
            //
            // // 验时间戳签名值
            // Signature signature2 = Signature.getInstance("SM3withSM2", "BC");
            // CertificateFactory fact2 = CertificateFactory.getInstance("X.509", "BC");
            // X509Certificate cert4 = (X509Certificate) fact2.generateCertificate(new ByteArrayInputStream(timeCert.getEncoded()));
            // signature2.initVerify(cert4.getPublicKey());
            // signature2.update(timeStampAttr.getEncoded());
            // boolean verify2 = signature2.verify(timeStampSignValue.getEncoded());
            // System.out.println("验时间戳签名值" + verify2);


        }
    }

    @Test
    @SneakyThrows
    public void pkcs7ConstructTest() {
        String pkcs7Hex = "";
        ASN1InputStream asn1InputStream = new ASN1InputStream(Hex.decode(pkcs7Hex));
        ASN1Primitive asn1Primitive;
        while ((asn1Primitive = asn1InputStream.readObject()) != null) {
            ASN1Sequence sequence = (ASN1Sequence) asn1Primitive;
            ASN1TaggedObject taggedObject = (ASN1TaggedObject) sequence.getObjectAt(1);
            ASN1Sequence contentSequence = (ASN1Sequence) taggedObject.getBaseObject();

            // certificateSet
            ASN1TaggedObject taggedObject1 = (ASN1TaggedObject)contentSequence.getObjectAt(3);
            ASN1Sequence certificateSetSequence = (ASN1Sequence) taggedObject1.getBaseObject();

            ASN1Set signerInfosSet = (ASN1Set)contentSequence.getObjectAt(4);
            ASN1Sequence signerInfoSequence = (ASN1Sequence) signerInfosSet.getObjectAt(0);
            ASN1TaggedObject taggedObject2 = (ASN1TaggedObject) signerInfoSequence.getObjectAt(3);
            // ASN1Set signAttr2 = ASN1Set.getInstance(signAttr, false);



        }

    }



}
